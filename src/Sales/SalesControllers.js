// Create a new sales record

const Sales = require('./SalesModel');

exports.createSales = async (req, res) => {
  try {
    const newSale = new Sales(req.body);
    console.log(req.body);
    const result = await newSale.save();
    console.log(result);
    if (!result) {
      return res.status(400).json({ error: 'All fields are required' });
    }
    res
      .status(201)
      .json({ message: 'Sale created successfully', sale: result });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

// Calculate and return the total revenue generated by all sales transactions

exports.totalRevenue = async (req, res) => {
  try {
    const totalRevenue = await Sales.aggregate([
      {
        $group: {
          _id: null,
          total: { $sum: { $multiply: ['$quantity', '$price'] } },
        },
      },
    ]);

    res.json({ totalRevenue: totalRevenue[0].total });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

// Find and return the total quantity sold for each product

exports.quantityByProduct = async (req, res) => {
  try {
    const quantityByProduct = await Sales.aggregate([
      {
        $group: {
          _id: '$product',
          totalQuantity: { $sum: '$quantity' },
        },
      },
    ]);

    res.json(quantityByProduct);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

// Retrieve the top 5 products with the highest total revenue, along with their total revenue values

exports.topProducts = async (req, res) => {
  try {
    const topProducts = await Sales.aggregate([
      {
        $group: {
          _id: '$product',
          totalRevenue: { $sum: { $multiply: ['$quantity', '$price'] } },
        },
      },
      { $sort: { totalRevenue: -1 } },
      { $limit: 5 },
    ]);

    res.json(topProducts);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal server error' });
  }
};
// Calculate and return the average price of products sold

exports.averagePrice = async (req, res) => {
  try {
    const averagePrice = await Sales.aggregate([
      {
        $group: {
          _id: null,
          averagePrice: { $avg: '$price' },
        },
      },
    ]);

    res.json({ averagePrice: averagePrice[0].averagePrice });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal server error' });
  }
};

// Group the sales data by month and year and calculate the total revenue for each month-year combination

exports.revenueByMonth = async (req, res) => {
  try {
    const revenueByMonth = await Sales.aggregate([
      {
        $group: {
          _id: {
            year: { $year: '$date' },
            month: { $month: '$date' },
          },
          totalRevenue: { $sum: { $multiply: ['$quantity', '$price'] } },
        },
      },
    ]);

    res.json(revenueByMonth);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal server error' });
  }
};
// Find and return the product that had the highest quantity sold on a single day

exports.highestQuantitySold = async (req, res) => {
  try {
    const highestQuantitySold = await Sales.findOne({})
      .sort('-quantity')
      .exec();
    res.json(highestQuantitySold);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal server error' });
  }
};
// Calculate and return the total salary expense for each department

exports.departmentSalaryExpense = async (req, res) => {
  try {
    const departmentSalaryExpense = await Sales.aggregate([
      {
        $group: {
          _id: '$department',
          totalExpense: { $sum: { $multiply: ['$quantity', '$price'] } },
        },
      },
    ]);

    res.json(departmentSalaryExpense);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Internal server error' });
  }
};
